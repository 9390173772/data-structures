#include <stdio.h>
#include<stdlib.h>
#define TABLE_SIZE 10
int h[TABLE_SIZE]={NULL};
void insert()
{
int key,index,i,flag=0,hkey;
printf("\nenter a value to insert into hash table\n");
scanf("%d",&key);
hkey=key%TABLE_SIZE;
for(i=0;i<TABLE_SIZE;i++)
 {
 index=(hkey+i)%TABLE_SIZE;
 if(h[index] == NULL)
 {
 h[index]=key;
 break;
 }
 }#include <stdio.h>
#include <stdlib.h>
struct node {
 int element;
 struct node* left;
 struct node* right;
};
struct node* createNode(int val)
{
 struct node* Node = (struct node*)malloc(sizeof(struct node));
 Node->element = val;
 Node->left = NULL;
 Node->right = NULL;
 return (Node);
}
void traversePreorder(struct node* root)
{
 if (root == NULL)
 return;
 printf(" %d ", root->element);
 traversePreorder(root->left);
 traversePreorder(root->right);
}
void traverseInorder(struct node* root)
{
 if (root == NULL)
 return;
 traverseInorder(root->left);
 printf(" %d ", root->element);
 traverseInorder(root->right);
}
void traversePostorder(struct node* root)
{
 if (root == NULL)
 return;
 traversePostorder(root->left);
 traversePostorder(root->right);
 printf(" %d ", root->element);
}
int main()
{
 struct node* root = createNode(36);
 root->left = createNode(26);
 root->right = createNode(46);
 root->left->left = createNode(21);
 root->left->right = createNode(31);
 root->left->left->left = createNode(11);
 root->left->left->right = createNode(24);
 root->right->left = createNode(41);
 root->right->right = createNode(56);
 root->right->right->left = createNode(51);
 root->right->right->right = createNode(66);
 printf("\n The Preorder traversal of given binary tree is -\n");
 traversePreorder(root);
 printf("\n The Inorder traversal of given binary tree is -\n");
 traverseInorder(root);
 printf("\n The Postorder traversal of given binary tree is -\n");
 traversePostorder(root);
 return 0;
}
 if(i == TABLE_SIZE)
 printf("\nelement cannot be inserted\n");
}
void search()
{
int key,index,i,flag=0,hkey;
printf("\nenter search element\n");
scanf("%d",&key);
hkey=key%TABLE_SIZE;
for(i=0;i<TABLE_SIZE; i++)
{
 index=(hkey+i)%TABLE_SIZE;
 if(h[index]==key)
 {
 printf("value is found at index %d",index);
 break;
 }
 }
 if(i == TABLE_SIZE)
 printf("\n value is not found\n");
}
void display()
{
 int i;
 printf("\nelements in the hash table are \n");
 for(i=0;i< TABLE_SIZE; i++)
 printf("\nat index %d \t value = %d",i,h[i]);
}
main()
{
 int opt,i;
 while(1)
 {
 printf("\nPress 1. Insert\t 2. Display \t3. Search \t4.Exit \n");
 scanf("%d",&opt);
 switch(opt)
 {
 case 1:
 insert();
 break;
 case 2:
 display();
 break;
 case 3:
 search();
 break;
 case 4:exit(0);
 }
 }
}
